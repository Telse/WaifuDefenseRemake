package Boss2
import ObjectIdGenerator
import AbilityObjEditing
import UnitIds
import Units
import IBoss
import BossState
import PlayerEvents
import ClosureTimers
import GroupUnitsInRange
import EnemyDeath
import ISpell
import FrontSwipe
import BackSwipe
import Stomp
import Charge
import Earthquake
import BossHelpers
import GroundSlam
import EarthSpikes


public constant SECOND_BOSS_ID = compiletime(HERO_ID_GEN.next())
@compiletime function CreateSecondBoss()
    new HeroDefinition(SECOND_BOSS_ID, UnitIds.nerubianspiderlord)
    ..setName("Second Boss")
    ..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNElvenFarm.blp")
    ..setModelFile(Units.tauren)
    ..setMovementType(MovementType.Foot)
    ..setRace(Race.Human)
    ..setAttacksEnabled(0)
    ..setSpeedBase(350)
    ..setManaInitialAmount(20)
    ..setManaMaximum(100)
    ..setManaRegeneration(0)
    ..setShadowImageCenterX(0)
    ..setShadowImageCenterY(0)
    ..setShadowImageUnit("")
    ..setShadowImageHeight(0)
    ..setShadowImageWidth(0)
    ..setCollisionSize(0)
    ..setFoodCost(0)
    ..setSightRadiusDay(0)
    ..setSightRadiusNight(0)
    ..setHitPointsMaximumBase(10000)
    ..setAttacksEnabled(1)
    ..setAttack1DamageBase(20)
    ..setAttack1CooldownTime(1)
    ..setAttack1Range(130)
    ..setHeroAbilities("")
    ..setNormalAbilities("")
    ..setScalingValue(3)
    ..setCollisionSize(128)
    ..setAcquisitionRange(1500)


public class Boss2 implements IBoss

    LinkedList<ISpell> BasicSpells = new LinkedList<ISpell>()

    LinkedList<ISpell> AdvancedSpells = new LinkedList<ISpell>()

    LinkedList<ISpell> UltimateSpell = new LinkedList<ISpell>()

    unit _bossUnit
    BossState _currentState = BossState.Basic
    int _rage = 1
    
    construct()
        BasicSpells
            ..add(new EarthSpikes())
            ..add(new FrontSwipe())
            ..add(new BackSwipe())
            ..add(new Stomp())

        AdvancedSpells
            ..add(new Charge())
            ..add(new GroundSlam())

        UltimateSpell
            ..add(new Earthquake())

        _bossUnit = CreateEnemyUnit(
            SECOND_BOSS_ID , 
            gg_rct_Boss2Spawn.getCenter(), 
            0 .fromDeg())

    function GetBossUnit() returns unit
        return _bossUnit
    
    function GetRage() returns int
        return _rage

    override function castSpell()
        if(_bossUnit.isAlive() and _bossUnit.isPaused() == false)

            AddRageBasedOnBossHp()
            SetBossStatus()

            switch _currentState
                case Basic
                    PrepareSpells(BasicSpells) 
                    _rage += 10

                case Advanced
                    PrepareSpells(AdvancedSpells)
                    _rage += 10
                    
                case Ultimate
                    PrepareSpells(UltimateSpell)
                    _rage = 1

    function PrepareSpells(LinkedList<ISpell> spellList)
        var enemies = _bossUnit.getEnemiesInRange(_bossUnit, 1500)

        if enemies.isEmpty() == false
            var spell = spellList.get(GetRandomInt(0, spellList.size()-1))

            SetBossSpellInfo(_bossUnit, spell.GetName())
            SetPauseTime(spell)

            spell.Cast(_bossUnit)
            Log.info("Second boss casting a spell. List size: " +  spellList.size().toString())

        enemies.clear()
        enemies.destr()
        enemies = null

    function SetPauseTime(ISpell spell)
        
        if(spell.GetPauseTime() > 0 and spell.HasPauseLogic() == false)
            _bossUnit.pause()

            Log.info("Setting based pause logic")
            doAfter(spell.GetPauseTime()) () ->
                _bossUnit.unpause()
                
        else if(spell.GetPauseTime() > 0 and spell.HasPauseLogic() == true)
            _bossUnit.pause()
            Log.info("Deferring to custom logic")

    function SetBossStatus()
        if(_rage < 50)
            _currentState = BossState.Basic

        if _rage >= 50 and _rage < 100
            _currentState = BossState.Advanced

        if _rage >= 100
            _currentState = BossState.Ultimate

    function AddRageBasedOnBossHp()
        if _bossUnit.getHP() == 0
            return

        var bossPercentHp = _bossUnit.getHP() / _bossUnit.getMaxHP()
        
        if bossPercentHp <= .25
            _rage += 15
            return

        if bossPercentHp <= .50
            _rage += 10
            return

        if bossPercentHp <= .75
            _rage += 5
            return